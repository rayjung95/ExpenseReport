@page "/auth/login"
@layout AuthLayout
@using StoreManager.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider


@* TODO: Try to convert register page to the new ui Test Git flow from visual studio *@
<div class="container">

    <!-- Outer Row -->
    <div class="row justify-content-center">

        <div class="col-xl-10 col-lg-12 col-md-9">

            <div class="card o-hidden border-0 my-5">
                <div class="card-body p-0">
                    <!-- Nested Row within Card Body -->
                    <div class="row">
                        <div class="col-lg-6 d-none d-lg-block" style=" background: url('/images/bg-login.jpg');background-position: center;background-size: cover;"></div>
                        <div class="col-lg-6">
                            <div style="padding:10rem 3rem 10rem 3rem !important;">
                                <div class="text-center">
                                    <h1 class="h4 text-gray-900 mb-4">LOGIN !!!!</h1>
                                </div>
                                <EditForm Model="model" OnValidSubmit="LoginUser">
                                    <div class="form-group">
                                        <input asp-for="Input.Email" type="email" class="form-control form-control-user" id="exampleInputEmail" aria-describedby="emailHelp" placeholder="Enter Email Address...">
                                        <small><span asp-validation-for="Input.Email" class="text-danger"></span></small>
                                    </div>
                                    <div class="form-group">
                                        <input asp-for="Input.Password" type="password" class="form-control form-control-user" id="exampleInputPassword" placeholder="Password">
                                        <small><span asp-validation-for="Input.Password" class="text-danger"></span></small>
                                    </div>


                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                                                  Text="Login"
                                                  ButtonStyle="Radzen.ButtonStyle.Primary"
                                                  Disabled="isBusy"
                                                  class="btn-block mr-2" />

                                </EditForm>
                                <hr>

                                <div class="text-center">
                                    <RadzenButton ButtonType="Radzen.ButtonType.Button"
                                                  Text="Register"
                                                  ButtonStyle="Radzen.ButtonStyle.Secondary"
                                                  Disabled="isBusy"
                                                  class="btn-block mr-2" Click="GoToRegister" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-xl-10 col-lg-12 col-md-9">
            <div class="card">
                <div class="card-header py-3">
                    <h6 class="m-0 text-secondary">Default Credential</h6>
                </div>
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col">
                            <b>Super Admin : </b> superadmin@gmail.com / 123Pa$$word! / Default
                            <br />
                            <b>Basic User : </b> basicuser@gmail.com / 123Pa$$word! / Default
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>















<!--<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <RadzenCard>-->
@*@if(!string.IsNullOrWhiteSpace(message))
    {
        <div class="alert alert-info">@message</div>
    }*@
<!--<ul>
                    @foreach (var item in userInfo)
                    {
                        <li>
                            @item.Key : @item.Value
                        </li>

                    }
                </ul>
                <AlertMessage Message="@message" MessageType="@messageType" />

                <label>Emaill</label>
                <RadzenTextBox @bind-Value="model.Email">

                </RadzenTextBox>

                <label>Password</label>
                <RadzenTextBox @bind-Value="model.Password">

                </RadzenTextBox>

                <hr />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                              Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary"
                              Disabled="isBusy"
                              class="btn-block mr-2" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button"
                              Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary"
                              Disabled="isBusy"
                              class="btn-block mr-2" Click="GoToRegister" />

            </RadzenCard>


        </EditForm>
    </div>
</div>-->
@code {
    LoginRequest model = new LoginRequest();


    bool isBusy = false;
    string message = string.Empty;

    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    Dictionary<string, string> userInfo = new Dictionary<string, string>();

    public async Task LoginUser()
    {
        isBusy = true;

        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            message = "Welcome to PlannerApp";
            userInfo = result.UserInfo;
            messageType = Models.AlertMessageType.Success;

            var resultUserInfo = new StoreManager.ExpenseReport.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
            };

            await storageService.SetItemAsync<StoreManager.ExpenseReport.Models.LocalUserInfo>("User", resultUserInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {

            message = string.Join("\n", result.Errors);
            messageType = Models.AlertMessageType.Error;

        }


        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
