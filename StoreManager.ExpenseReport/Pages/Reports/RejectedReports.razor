@page "/reports/rejected"
@page "/reports/rejected/{pageNumber}"

@inject ReportsService reportsService
@attribute [Authorize]


<h3>Rejected Reports</h3>
@if (isBusy)
{
    <h2>Loading...</h2>
}
else
{
    <RadzenGrid Data=@reports AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="ExpenseClaim" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="ExpenseClaim" Property="Title" Title="Title" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="RequesterName" Title="Requester Name" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="ApproverName" Title="Approver Name" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="SubmitDate" Title="Submit Date" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="ApprovalDate" Title="Approval Date" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="TotalAmount" Title="Total Amount" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="Status" Title="Status" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="RequesterComments" Title="Requester Comments" />
            <RadzenGridColumn TItem="ExpenseClaim" Property="ApproverComments" Title="Approver Comments" />
        </Columns>
    </RadzenGrid>
}


@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    bool isBusy = false;
    IEnumerable<ExpenseClaim> reports;

    async Task getReportsAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        reportsService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        if (PageNumber == null)
        {
            PageNumber = 1;
        }

        var result = await reportsService.GetAllReportsByPageAsync("rejected", PageNumber.Value);
        reports = result.Data.AsEnumerable();
        isBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {

        await getReportsAsync();
    }

}
